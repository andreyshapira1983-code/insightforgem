// helper —Ä—è–¥–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏:
const isAuthOrQuota = (s)=> s===401 || s===429;

// --- GENERATOR ---
if (agent === 'generator' && action === 'generate'){
  const topic = (payload.topic||'–∏–¥–µ—è').toString();
  try {
    if (DEMO) throw {status:429}; // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤ –¥–µ–º–æ, –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞
    const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–¥–µ–π –ø–æ —Ç–µ–º–µ: "${topic}". –ö—Ä–∞—Ç–∫–æ, —Å —à–∞–≥–∞–º–∏.`;
    const txt = await callOpenAI([{role:'user', content: prompt}], key);
    return json(200, { ideas: txt.split(/\n(?=–ò–¥–µ—è|-\s)/).filter(Boolean), demo:false });
  } catch(e){
    if (isAuthOrQuota(e.status)) {
      const ideas = Array.from({length:5}, (_,i)=>`–ò–¥–µ—è #${i+1}\n` + demoText(`${topic} ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç ${i+1}`));
      return json(200, { ideas, demo:true });
    }
    return json(e.status||500, { error: e.message || String(e) });
  }
}

// --- JUDGE ---
if (agent === 'judge' && action === 'score'){
  const idea = (payload.idea||'').toString();
  if (!idea.trim()) return json(400, { error:'Provide `payload.idea`' });
  try {
    if (DEMO) throw {status:429};
    const sys = '–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON {score, originality, clarity, feasibility, impact}. –ö–æ—Ä–æ—Ç–∫–æ.';
    const user = `–û—Ü–µ–Ω–∏ –∏–¥–µ—é. –ò–¥–µ—è: """${idea}"""`;
    const txt = await callOpenAI([{role:'system',content:sys},{role:'user',content:user}], key);
    let out; try{ out = JSON.parse(txt.match(/\{[\s\S]*\}$/)?.[0] || '{}') }catch{ out=null }
    return json(200, out || demoScore(idea));
  } catch(e){
    if (isAuthOrQuota(e.status)) return json(200, demoScore(idea));
    return json(e.status||500, { error: e.message || String(e) });
  }
}

// --- DESIGNER ---
if (agent === 'designer' && action === 'rewrite'){
  const { heading='–ò–¥–µ—è', sub='–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫', cta='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å' } = payload||{};
  try {
    if (DEMO) throw {status:429};
    const prompt = `–ü–µ—Ä–µ–ø–∏—à–∏ 3 —Å—Ç—Ä–æ–∫–∏ –ª–µ–Ω–¥–∏–Ω–≥–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫(<=60), –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫(<=100), CTA(<=20). –ò—Å—Ö–æ–¥–Ω–∏–∫: ${heading} / ${sub} / ${cta}. –í–µ—Ä–Ω–∏ JSON {heading, sub, cta}.`;
    const txt = await callOpenAI([{role:'user',content:prompt}], key);
    let o=null; try{ o=JSON.parse(txt.match(/\{[\s\S]*\}$/)?.[0]||'{}')}catch{}
    return json(200, o || { heading, sub, cta, demo:true });
  } catch(e){
    if (isAuthOrQuota(e.status)) {
      return json(200, {
        heading: `üöÄ ${heading}`.slice(0,64),
        sub: `${sub} ¬∑ –ø–ª–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π`.slice(0,100),
        cta: cta.toUpperCase().slice(0,24),
        demo:true
      });
    }
    return json(e.status||500, { error: e.message || String(e) });
  }
}

// --- RESEARCHER ---
if (agent === 'researcher' && action === 'research'){
  const q = (payload.query||'').toString();
  if (!q.trim()) return json(400, { error:'Provide `payload.query`' });
  try {
    if (DEMO) throw {status:429};
    const prompt = `–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø–æ —Ç–µ–º–µ "${q}": 3 —Ç–µ–∑–∏—Å–∞, 5 –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —Ç–∏–ø—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –í–µ—Ä–Ω–∏ JSON {summary, terms, sources}.`;
    const txt = await callOpenAI([{role:'user',content:prompt}], key);
    let o=null; try{ o=JSON.parse(txt.match(/\{[\s\S]*\}$/)?.[0]||'{}')}catch{}
    return json(200, o || { summary:`${q}`, terms:[q], sources:[], demo:true });
  } catch(e){
    if (isAuthOrQuota(e.status)) {
      const terms = [`${q} –∫–µ–π—Å—ã`, `${q} –±–µ–Ω—á–º–∞—Ä–∫–∏`, `${q} —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`];
      return json(200, { summary:`DEMO: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ ¬´${q}¬ª.`, terms, sources:[], demo:true });
    }
    return json(e.status||500, { error: e.message || String(e) });
  }
}
