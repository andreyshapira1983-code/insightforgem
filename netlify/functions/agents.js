// netlify/functions/agents.js
const API = 'https://api.openai.com/v1';
const MODEL = 'gpt-4o';

// ---------- helpers ----------
const json = (code, obj) => ({ statusCode: code, headers:{'Content-Type':'application/json'}, body: JSON.stringify(obj) });
const clamp = (n,a,b)=>Math.max(a,Math.min(b,n));
const hash = s => [...(s||'')].reduce((h,c)=>((h*33 + c.charCodeAt(0))>>>0), 5381);

// DEMO –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç
function demoText(idea){
  const text = (idea||'–º–æ—è –∏–¥–µ—è').toString().slice(0,800);
  const h = hash(text), pick = (arr,n=h)=>arr[n%arr.length];
  const probs = ['—Å–ª–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç','—Ç–µ—Ä—è–µ—Ç—Å—è —Ñ–æ–∫—É—Å','–º–Ω–æ–≥–æ —Ä—É—á–Ω—ã—Ö —à–∞–≥–æ–≤','–Ω–µ—Ç –º–µ—Ç—Ä–∏–∫','–¥–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≥–∏–ø–æ—Ç–µ–∑—ã'];
  const vals  = ['—ç–∫–æ–Ω–æ–º–∏—Ç 60‚Äì80% –≤—Ä–µ–º–µ–Ω–∏','–¥–∞—ë—Ç –ø–ª–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π','—É–±–∏—Ä–∞–µ—Ç —Ä—É—Ç–∏–Ω—É','–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏','–ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ—à–∞—Ç—å –±–µ–∑ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤'];
  const steps = ['3‚Äì5 –∏—Å—Ç–æ—Ä–∏–π ‚Üí —Ç–æ–ø-3 –±–æ–ª–∏','–ø—Ä–æ—Ç–æ—Ç–∏–ø + 5 –∏–Ω—Ç–µ—Ä–≤—å—é','–º–∏–Ω–∏-—Ç–µ—Å—Ç –Ω–∞ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö','2 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç—á—ë—Ç (—Å–∫—Ä–∏–Ω—ã+—Ü–∏—Ñ—Ä—ã)'];
  const risks = ['–Ω–µ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞','–ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Å–ø—Ä–æ—Å–∞','–ø—Ä–∞–≤–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è','–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö'];
  return [
    `–ò–¥–µ—è: ${text}`,
    `–ü—Ä–æ–±–ª–µ–º–∞: ${pick(probs)}`,
    `–¶–µ–Ω–Ω–æ—Å—Ç—å: ${pick(vals)}`,
    `–ü–ª–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π: 1) ${pick(steps,h+1)}  2) ${pick(steps,h+2)}  3) ${pick(steps,h+3)}`,
    `–†–∏—Å–∫–∏: ${pick(risks)} ‚Üí —Å–º—è–≥—á–µ–Ω–∏–µ: –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç.`,
    `–°—Ç–∞—Ç—É—Å: DEMO`
  ].join('\n');
}
function demoScore(idea){
  const h = hash(idea||''); const len=(idea||'').trim().split(/\s+/).length||1;
  const originality = clamp(((h%100)+15)%100, 10, 95);
  const clarity = clamp(Math.round(100 - Math.abs(len-25)*2), 10, 95);
  const feasibility = /–ø—Ä–æ—Ç–æ—Ç–∏–ø|MVP|–ø—Ä–æ—Å—Ç|–¥–µ—à–µ–≤|nocode|figma/i.test(idea||'') ? 70 : 45;
  const impact = /—Ä—ã–Ω–æ–∫|–º–∏–ª–ª–∏–æ–Ω|–≥–æ—Ä–æ–¥|—Å—Ç—Ä–∞–Ω–∞|–º–∏—Ä|b2b|b2c/i.test(idea||'') ? 65 : 40;
  const score = clamp(Math.round(0.35*originality + 0.25*clarity + 0.2*feasibility + 0.2*impact), 10, 95);
  return { score, breakdown:{ originality, clarity, feasibility, impact }, demo:true };
}

// –≤—ã–∑–æ–≤ OpenAI —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ–ª–±—ç–∫–æ–º
async function callOpenAI(messages, key){
  const body = { model: MODEL, messages, temperature: 0.4, max_tokens: 400 };
  const r = await fetch(`${API}/chat/completions`, {
    method:'POST',
    headers:{ 'Authorization':'Bearer '+key, 'Content-Type':'application/json' },
    body: JSON.stringify(body)
  });
  const text = await r.text(); let data=null; try{ data=JSON.parse(text) }catch{}
  if (!r.ok) throw Object.assign(new Error(data?.error?.message || text), { status:r.status });
  return data?.choices?.[0]?.message?.content || '';
}

// –ø—Ä–æ—Å—Ç–µ–π—à–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π (–ø—Ä–∏–º–µ—Ä)
const PRIVS = {
  guard:      ['filter'],
  generator:  ['generate'],
  judge:      ['score'],
  designer:   ['rewrite'],
  researcher: ['research'],
  manager:    ['orchestrate']
};

exports.handler = async (event) => {
  try{
    if (event.httpMethod !== 'POST') return json(405, { error:'Use POST' });

    const { agent, action, payload={} } = JSON.parse(event.body || '{}');
    if (!agent || !action) return json(400, { error:'Provide `agent` and `action`' });
    if (!PRIVS[agent]?.includes(action)) return json(403, { error:`Agent "${agent}" cannot "${action}"` });

    const key = process.env.OPENAI_API_KEY || process.env.OPEN_API_KEY || null;
    const DEMO = !key || process.env.DEMO_MODE === '1';

    // --------- GUARD ----------
    if (agent === 'guard' && action === 'filter'){
      const text = (payload.text||'').toString();
      if (text.length > 4000) return json(413, { ok:false, reason:'too_long' });
      if (/[A-Za-z0-9]{32,}/.test(text)) return json(400, { ok:false, reason:'secrets_look_like_key' });
      // –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
      if (/(—Ö—É–π|–ø–∏–∑–¥|–±–ª—è—Ç—å|—Å—É–∫–∞)/i.test(text)) return json(400, { ok:false, reason:'bad_language' });
      return json(200, { ok:true, demo: DEMO });
    }

    // --------- GENERATOR ----------
    if (agent === 'generator' && action === 'generate'){
      const topic = (payload.topic||'–∏–¥–µ—è').toString();
      if (DEMO){
        const ideas = Array.from({length:5}, (_,i)=>`–ò–¥–µ—è #${i+1}: ${demoText(`${topic} ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç ${i+1}`)}`);
        return json(200, { ideas, demo:true });
      }
      const prompt = `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–¥–µ–π –ø–æ —Ç–µ–º–µ: "${topic}". –ö—Ä–∞—Ç–∫–æ, —Å –ø–æ–ª—å–∑–æ–π –∏ —Å–ª–µ–¥—É—é—â–∏–º–∏ —à–∞–≥–∞–º–∏.`;
      const txt = await callOpenAI([{role:'user', content: prompt}], key);
      return json(200, { ideas: txt.split(/\n(?=–ò–¥–µ—è|-\s)/).filter(Boolean), demo:false });
    }

    // --------- JUDGE ----------
    if (agent === 'judge' && action === 'score'){
      const idea = (payload.idea||'').toString();
      if (!idea.trim()) return json(400, { error:'Provide `payload.idea`' });
      if (DEMO) return json(200, demoScore(idea));
      const sys = '–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON {score:0..100, originality, clarity, feasibility, impact}. –ö–æ—Ä–æ—Ç–∫–æ, –±–µ–∑ –≤–æ–¥—ã.';
      const user = `–û—Ü–µ–Ω–∏ –∏–¥–µ—é –ø–æ –Ω–æ–≤–∏–∑–Ω–µ, —è—Å–Ω–æ—Å—Ç–∏, —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç–∏, –≤–ª–∏—è–Ω–∏—é. –ò–¥–µ—è: """${idea}"""`;
      const txt = await callOpenAI([{role:'system',content:sys},{role:'user',content:user}], key);
      let out; try{ out = JSON.parse(txt.match(/\{[\s\S]*\}$/)?.[0] || '{}') }catch{ out=null }
      return json(200, out || demoScore(idea));
    }

    // --------- DESIGNER ----------
    if (agent === 'designer' && action === 'rewrite'){
      const { heading='–ò–¥–µ—è', sub='–ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫', cta='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å' } = payload||{};
      if (DEMO){
        return json(200, {
          heading: `üöÄ ${heading}`.slice(0,64),
          sub: `${sub} ¬∑ –ø–ª–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π`.slice(0,100),
          cta: cta.toUpperCase().slice(0,24),
          demo:true
        });
      }
      const prompt = `–ü–µ—Ä–µ–ø–∏—à–∏ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ –ª–µ–Ω–¥–∏–Ω–≥–∞ –ø–æ–¥ –∫–æ–Ω–≤–µ—Ä—Å–∏—é: –∑–∞–≥–æ–ª–æ–≤–æ–∫ (<=60), –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (<=100), CTA (<=20). –ò—Å—Ö–æ–¥–Ω–∏–∫: ${heading} / ${sub} / ${cta}. –í–µ—Ä–Ω–∏ JSON —Å –∫–ª—é—á–∞–º–∏ heading, sub, cta.`;
      const txt = await callOpenAI([{role:'user',content:prompt}], key);
      let o=null; try{ o=JSON.parse(txt.match(/\{[\s\S]*\}$/)?.[0]||'{}')}catch{}
      return json(200, o || { heading, sub, cta, demo:true });
    }

    // --------- RESEARCHER ----------
    if (agent === 'researcher' && action === 'research'){
      const q = (payload.query||'').toString();
      if (!q.trim()) return json(400, { error:'Provide `payload.query`' });
      if (DEMO){
        const terms = [`${q} –∫–µ–π—Å—ã`, `${q} –±–µ–Ω—á–º–∞—Ä–∫–∏`, `${q} —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`];
        return json(200, { summary:`DEMO: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ ¬´${q}¬ª.`, terms, sources:[], demo:true });
      }
      const prompt = `–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø–æ —Ç–µ–º–µ "${q}": 3 —Ç–µ–∑–∏—Å–∞, 5 –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –∏ —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –í–µ—Ä–Ω–∏ JSON {summary, terms, sources}.`;
      const txt = await callOpenAI([{role:'user',content:prompt}], key);
      let o=null; try{ o=JSON.parse(txt.match(/\{[\s\S]*\}$/)?.[0]||'{}')}catch{}
      return json(200, o || { summary:`${q}`, terms:[q], sources:[], demo:true });
    }

    // --------- MANAGER ----------
    if (agent === 'manager' && action === 'orchestrate'){
      const topic = (payload.topic||'–∏–¥–µ—è').toString();
      // –ø—Ä–æ—Å—Ç–∞—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è: guard -> generator -> judge top -> designer
      // guard
      const guardRes = await exports.handler({ httpMethod:'POST', body: JSON.stringify({agent:'guard', action:'filter', payload:{ text: topic }}) });
      const g = JSON.parse(guardRes.body||'{}'); if (!g.ok) return json(400, { error:'blocked_by_guard', reason:g.reason });
      // generator
      const genRes = await exports.handler({ httpMethod:'POST', body: JSON.stringify({agent:'generator', action:'generate', payload:{ topic }}) });
      const ideas = JSON.parse(genRes.body||'{}').ideas || [];
      // judge best
      let best={score:-1, idea:''};
      for (const raw of ideas){
        const plain = (raw||'').toString().replace(/^–ò–¥–µ—è\s*#?\d+:\s*/,'');
        const jRes = await exports.handler({ httpMethod:'POST', body: JSON.stringify({agent:'judge', action:'score', payload:{ idea: plain }}) });
        const s = JSON.parse(jRes.body||'{}'); const sc = s.score || s?.breakdown?.score || 0;
        if (sc > best.score) best = { score: sc, idea: plain, details: s };
      }
      // designer
      const dRes = await exports.handler({ httpMethod:'POST', body: JSON.stringify({agent:'designer', action:'rewrite', payload:{ heading: best.idea, sub:'–°–æ–±–µ—Ä–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø –∏ –ø—Ä–æ–≤–µ—Ä—å —Å–ø—Ä–æ—Å –∑–∞ 7 –¥–Ω–µ–π', cta:'–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å' }}) });
      const design = JSON.parse(dRes.body||'{}');

      return json(200, { topic, best, design, demo: DEMO });
    }

    return json(400, { error:'Unknown route' });
  }catch(e){
    return json(e.status||500, { error: e.message || String(e) });
  }
};
