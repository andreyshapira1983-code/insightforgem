'use strict';

const { timingSafeEqual } = require('crypto');

// Роли -> имена переменных окружения
const ROLES = {
  gen: 'OPENAI_KEY_GEN',
  admin: 'OPENAI_KEY_ADMIN',
  design: 'OPENAI_KEY_DESIGN',
  guard: 'OPENAI_KEY_GUARD',
  research: 'OPENAI_KEY_RESEARCH',
  support: 'OPENAI_KEY_SUPPORT',
};

const FALLBACK = process.env.FALLBACK_KEY_NAME || 'OPENAI_API_KEY';

// Безопасная проверка токена
function isAuthorized(event) {
  const token = process.env.ADMIN_TOKEN || '';
  const sent = (event.headers?.['x-admin-token'] || event.headers?.['X-Admin-Token'] || '').toString();
  const a = Buffer.from(token);
  const b = Buffer.from(sent);
  if (!a.length || a.length !== b.length) return false;
  try { return timingSafeEqual(a, b); } catch { return false; }
}

function json(status, body) {
  return {
    statusCode: status,
    headers: {
      'Content-Type': 'application/json',
      'Cache-Control': 'no-store',
      'Referrer-Policy': 'no-referrer',
    },
    body: JSON.stringify(body),
  };
}

exports.handler = async (event) => {
  // Прячем эндпоинт, если нет токена
  if (!isAuthorized(event)) return json(404, { ok: false, error: 'Not Found' });

  // Сводка по ролям (без значений ключей)
  const roles = {};
  Object.entries(ROLES).forEach(([name, env]) => {
    roles[name] = { env, present: !!process.env[env] };
  });

  // Фолбэк и базовые флаги
  const fallback = { env: FALLBACK, present: !!process.env[FALLBACK], allow: process.env.ALLOW_FALLBACK === '1' };

  // Быстрые «маркеры» безопасности для админа-оркестра
  const checks = {
    adminTokenPresent: !!process.env.ADMIN_TOKEN,
    allRolesPresent: Object.values(roles).every(r => r.present),
    fallbackAllowed: fallback.allow,            // лучше false
    fallbackPresent: fallback.present,          // лучше false, если allow=false
  };

  // Подсказки (текстом, без секретов)
  const tips = [];
  if (!checks.adminTokenPresent) tips.push('Задайте ADMIN_TOKEN в Netlify (Functions scope).');
  if (checks.fallbackAllowed) tips.push('ALLOW_FALLBACK=true — лучше выключить.');
  tips.push('Проверьте наличие заголовков CSP/HSTS/Frame-Options в DevTools → Network → Headers.');
  tips.push('Убедитесь, что фронт не вызывает api.openai.com напрямую (только /.netlify/functions/openai).');

  return json(200, {
    ok: true,
    time: new Date().toISOString(),
    roles,
    fallback,
    checks,
    tips,
  });
};
